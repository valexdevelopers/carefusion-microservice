// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id          String       @id @default(uuid())
  name        String
  address     String
  logo        String?
  phone       String[]
  email       String
  city        String
  state       String
  country     String
  zipCode     String
  website     String?
  slogan      String?
  pobox       String?
  paymentPlan PaymentPlan?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  users User[]
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique // e.g. "DOCTOR", "LAB_ADMIN" all roles, including nhis staffs
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  updatedBy       String? // userId of the user who updated this role
  deletedAt       DateTime? // soft delete
  deletedBy       String? // userId of the user who deleted this role
  // @@index([updatedAt], name: "updated_at_index")
  // @@index([updatedById], name: "updated_by_index")
  rolePermissions RolePermission[]
  users           User[]

  @@index([name])
}

model Resource {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  updatedBy String? // userId of the user who updated this role
  deletedAt DateTime? // soft delete
  deletedBy String? // userId of the user who updated this role

  rolePermissions RolePermission[]
}

model RolePermission {
  id          String           @id @default(uuid())
  roleId      String
  resourceId  String
  action      PermissionAction
  path        String? // e.g. "/api/v1/users", "/api/v1/users/:id"
  description String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  updatedBy String? // userId of the user who updated this role
  deletedAt DateTime? // soft delete
  deletedBy String? // userId of the user who updated this role

  role     Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([roleId, resourceId])
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  firstName  String
  middleName String
  lastName   String
  phone      String[]
  type       UserType
  status     UserStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  updatedBy  String? // userId of the user who updated this role
  deletedAt  DateTime? // soft delete
  deletedBy  String? // userId of the user who updated this role
  hospitalId String?
  roleId     String?

  // relationships
  hospital             Hospital?             @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  role                 Role?                 @relation(fields: [roleId], references: [id]) // ðŸ‘ˆ relation to Role
  personalAccessTokens PersonalAccessToken[]
  passwordHistory      PasswordHistory[]
  addresss             Address[]

  staff              Staff?
  patient            Patient?
  nhisWorker         NHISWorker?
  publicHealthWorker PublicHealthWorker?
}

model PasswordHistory {
  id        String    @id @default(uuid())
  userId    String
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * PersonalAccessToken - for all types of code verification
 */
model PersonalAccessToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      TokenType
  expiry    DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
}

// ------------ STAFF ------------

model Staff {
  id         String  @id @default(uuid()) @map("user_id")
  user       User    @relation(fields: [id], references: [id], onDelete: Cascade)
  department String?

  createdAt DateTime @default(now())
}

// ------------ PATIENT ------------

model Address {
  id         String      @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String?
  type       AddressType
  userId     String? // If tied to User
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  updatedBy  String? // userId of the user who updated this role
  deletedAt  DateTime? // soft delete
  deletedBy  String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type]) // ðŸ‘ˆ ensures 1 address per type per patient
}

model Patient {
  id                 String        @id @default(uuid()) @map("user_id")
  user               User          @relation(fields: [id], references: [id], onDelete: Cascade)
  patientId          String        @unique
  nfcId              String?       @unique // the NFC cardâ€™s UID or token
  nfcLinkedAt        DateTime? // when the card was linked to the patient
  nfcLinkedBy        String? // who did the linking 
  dateOfBirth        DateTime
  sex                Gender
  maritalStatus      MaritalStatus
  nationality        String?
  occupation         String?
  religion           String?
  ethnicity          String?
  spokenLanguages    String[]
  bloodGroup         BloodGroup?
  genotype           Genotype?
  emergencyContactId String
  emergencyContact   NextOfKin[]

  billingtype String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NextOfKin {
  id                 String   @id @default(uuid())
  patientId          String
  firstName          String
  middleName         String
  lastName           String
  relationship       String // e.g. "Mother", "Brother", "Spouse"
  phone              String[]
  email              String?
  address            String?
  isEmergencyContact Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@unique([patientId, isEmergencyContact])
  @@index([patientId, isEmergencyContact], name: "emergency_contact_index")
  @@index([patientId], name: "patient_contact_index")
}

// ------------ NHIS WORKER ------------
// insurance works account
model NHISWorker {
  id   String    @id @default(uuid()) @map("user_id")
  user User      @relation(fields: [id], references: [id], onDelete: Cascade)
  role NHISRole?
}

// ------------ PUBLIC HEALTH WORKER ------------

model PublicHealthWorker {
  id   String @id @default(uuid()) @map("user_id")
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  role PublicHealthRole?
}

enum PermissionAction {
  READ
  WRITE
  DELETE
  UPDATE
}

enum PublicHealthRole {
  INSPECTOR
  DATA_ANALYST
  SUPERVISOR
  OTHER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum NHISRole {
  ADMIN
  VERIFIER
  CLAIMS_PROCESSOR
  OTHER
}

enum PaymentPlan {
  EPIC
  PREMIUM
  EXQUISITE
}

enum UserStatus {
  ACTIVE
  NOTAPPROVED //admin account
  RESTRICTED
  DELETED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum AddressType {
  RESIDENCE
  WORK
  ORIGIN
}

enum TokenType {
  SESSION
  API
  PASSWORDRESET
  DELETEACCOUNT
  VERIFYACCOUNT
}

enum UserType {
  SUPERADMIN
  ADMIN
  HOSPITAL_ADMIN
  HOSPITAL_SUPERADMIN
  HOSPITAL_MANAGER
  DOCTOR
  NURSE
  LAB_ADMIN
  PHARMACIST
  RECEPTIONIST
  ACCOUNTANT
  LAB_TECHNICIAN
  PHARMACY_TECHNICIAN
  RADIOLOGIST
  PHLEBOTOMIST
  OPTOMETRIST
  DENTIST
  OTHER
  PATIENT
  NHIS_WORKER
  PUBLIC_HEALTH_WORKER
  INSURANCE_PROVIDER
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum Genotype {
  AA
  AS
  SS
  AC
  SC
  CC
  AE
  EE
}
